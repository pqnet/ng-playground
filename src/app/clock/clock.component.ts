import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';

import { ClockService } from '../clock.service';
/**
 * This file defines another component, that we will use to add a digital clock in the top right of the application.
 *
 * With your last pull you brought in 4 different files.
 *  - clock.component.ts, clock.component.html, clock.component.css define a new component, called ClockComponent.
 *    You may also see that ClockComponent was added into the AppModule 'declaration' field. As we said before,
 *    this enables you to use the '<app-clock></app-clock>' tag in any point of your app.
 *    These files were generated by the `npx ng generate component --skip-tests` command
 *  - clock.service.ts is an injectable service that was generated by the `npx ng generate service --skip-tests` command
 *    The command though won't add this service to the list of 'providers' of the module, so we need to do it manually.
 *  Go to the 'app.module.ts', check that the ClockService has been declared correctly in the "providers" field, then
 *  come back here.
 */
@Component({
  selector: 'app-clock',
  templateUrl: './clock.component.html',
  styleUrls: ['./clock.component.css'],
})
export class ClockComponent  {

  /**
   * In Angular simply having a costructor declare a parameter is enough to trigger a dependency injection.
   * This constructor is parsed by the Angular compiler to realize that you need a ClockService to create this class,
   * it then looks for a way to construct a ClockService before instantiating this class
   */

  constructor(private readonly clockService: ClockService) {
  }

  /**
   * I copied the logic that we've seen in rx-tutorial partly into here, partly into ClockService.
   * Have a look and ensure that everything checks out, both here and in {@link clock.service.ts}
   */
  clockFace: Observable<string> =
    this.clockService.clock.pipe(
      // Discard all events not aligned with a second
      filter((d) => d.millisecond !== 0),
      // Print the timestamp into a string
      map((d) => {
        const clockFace = d.toFormat('HH:mm:ss');

        if (clockFace === '00:00:00') {
          return 'Midnight';
        }

        return clockFace;
      }),
      // Remove duplicates
      distinctUntilChanged(),
    );
  /**
   * Now check the template file
   */
}
